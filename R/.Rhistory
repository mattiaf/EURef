require (ggplot2)
require(ggplot2)
install.packages(require (ggplot2)
)
install.packages(ggplot2)
install.packages('ggplot2')
var=201401
url=paste("http://stats.grok.se/json/en/",var,"/web_scraping",sep="")
raw.data <- readLines(url, warn="F")
raw.data
url <- "http://en.wikipedia.org/wiki/Euromaidan"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
require(RCurl)
require(XML)
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
substring (SOURCE,1,200)
PARSED <- htmlParse(SOURCE) #Format the html code d
PARSED
xpathSApply(PARSED, "//h1")
xpathSApply(PARSED, "//h1",xmlValue)
xpathSApply(PARSED, "//h3",xmlValue)
url2 <- "http://9292.nl/reisadvies/leiden/station-schiphol/vertrek/2014-06-05T1057"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
xpathSApply(PARSED, "//h3",xmlValue)
PARSED <- htmlParse(SOURCE) #Format the html code d
xpathSApply(PARSED, "//h3",xmlValue)
xpathSApply(PARSED, "//h1",xmlValue)
xpathSApply(PARSED, "//h2",xmlValue)
PARSED <- htmlParse(SOURCE) #Format the html code d
PARSDE
PARSED
xpathSApply(PARSED, "//o",xmlValue)
xpathSApply(PARSED, "//p",xmlValue)
xpathSApply(PARSED, "//dt",xmlValue)
balh=xpathSApply(PARSED, "//dt",xmlValue)
blah<-xpathSApply(PARSED, "//dt",xmlValue)
blah
blah<-xpathSApply(PARSED, "//dt")
blah
blah<-xpathSApply(PARSED, "//dd")
blah
blah<-xpathSApply(PARSED, "//dd",xmlValue)
blah
blah[2]
blah[3]
blah[4]
class(blah[4])
xpathSApply(PARSED, "//h3",xmlValue)
url2 <- "http://9292.nl/reisadvies/oegstgeest/station-schiphol/vertrek/2014-06-05T1106"
SOURCE <-  getURL(url2,encoding="UTF-8") #Download the page
xpathSApply(PARSED, "//h3",xmlValue)
xpathSApply(PARSED, "//dd",xmlValue)
PARSED <- htmlParse(SOURCE) #Format the html code d
xpathSApply(PARSED, "//dd",xmlValue)
xpathSApply(PARSED, "//dd",xmlValue)
xpathSApply(PARSED, "//dd",xmlValue)
how far is the airport
url <- "http://9292.nl/reisadvies/oegstgeest/station-schiphol/vertrek/2014-06-05T1106"
SOURCE <-  getURL(url,encoding="UTF-8")
PARSED <- htmlParse(SOURCE) #Format the html code
a<-xpathSApply(PARSED, "//dd",xmlValue)
#a[2],a[4], a[6], a[8] are time values
#a[1],a[3], a[5], a[7] are number of changes
exit
quit()
?t.test
mn <- mean(mtcars$mpg);
s <- sd(mtcars$mpg);
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
mu0
z
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
?power.t.test
power.t.test(power = 0.9, delta = -0.01, sd = -0.04, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.9, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")$n
9+8+11+12
40*0.9
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
metro=rnorm(n, mean=m_metro, sd=std_metro)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
gotha
p <- t.test(m4, m6, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
?z.test
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(123)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(125)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(123)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(126)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(123)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(126)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
pn=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(23)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(26)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(23)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(26)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(23)
metro=rnorm(n, mean=m_metro, sd=std_metro)
set.seed(23)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
p
n=288
m_metro = 44
m_gotha = 42.04
std_metro = 12
std_gotha = 12
set.seed(21)
metro=rnorm(n, mean=m_metro, sd=std_metro)
gotha=rnorm(n, mean=m_gotha, sd=std_gotha)
p <- t.test(metro, gotha, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
?t.test
?power.t.test
power.t.test(n = 100, delta = 0.01, sd = 0.04, type = "one.sample", alt = "one.sided")$power
t_mean = -3
p_mean = 1.
t_std = 1.5
p_std= 1.8
test=rnorm(9,mean=t_mean,sd=t_std)
plac=rnorm(9,mean=p_mean,sd=p_std)
p <- t.test(test, plac, paired = FALSE, alternative="two.sided", var.equal=FALSE)$p.value
p
p2 <- t.test(test, plac, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
p2
(8+11+9+8)/(8+11+9+12)
m=1100
s=30
n=9
m + c(-1,1)*qt(0.975, (100-n))*s/sqrt(n)
data(mtcars)
mn <- mean(mtcars$mpg);
s <- sd(mtcars$mpg);
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
mu0
mn <- 12
s <- 4
z <- qnorm(.05)
n <-100
mu0 <- mn - z * s / sqrt(n)
mu0
mu0 <- mn + z * s / sqrt(n)
mu
mu0
m=1100
s=30
n=9
mu0 <- mn +c(1,-1) z * s / sqrt(n)
m=1100
s=30
n=9
mu0 <- mn +c(1,-1) * z * s / sqrt(n)
mu0
m=1100
s=30
n=9
z <- qnorm(.05)
mu0 <- mn +c(1,-1) * z * s / sqrt(n)
mu0
mn=1100
s=30
n=9
z <- qnorm(.05)
mu0 <- mn +c(1,-1) * z * s / sqrt(n)
mu0
m + c(-1,1)*qt(0.975, (100-n))*s/sqrt(n)
?qt
m + c(-1,1)*qt(0.975, (n))*s/sqrt(n)
r <- asd
r <- c(123,23)
r
source('~/Projects/EURef_to_github/R/refugees_destinations.R')
setwd("~/Projects/EURef_to_github/R/")
source('~/Projects/EURef_to_github/R/refugees_destinations.R')
setwd("~/Projects/EURef_to_github/R/")
source('~/Projects/EURef_to_github/R/refugees_destinations.R')
source('~/Projects/EURef_to_github/R/refugees_destinations.R')
output
output_perc
names(output_perc)
colnames(output_perc)
colnames(output_perc)+'_perc'
paste(colnames(output_perc),'_perc', sep="")
output_perc
cbind(output,output_perc)
colnames(output_perc)<-paste(colnames(output_perc),'_perc', sep="")
cbind(output,output_perc)
output_totperc<-cbind(output,output_perc)
output_totperc
write.csv(output_totperc, file = "FormattedData/perctotalgeocitizen.csv")  # acceptance rate of asylum applications by origin and destination
size(output)
size(output_perc)
length(output_perc)
dim(output_perc)
str(output_perc)
